name: "Setup Kubewarden cluster"
description: "Create a K3d cluster with Kubewarden installed with Telemetry infrastructure installed"
author: "Kubewarden"

inputs:
  controller-image-repository:
    description: "Define the controller container image repository"
    type: string
    required: false
    default: ""
  controller-image-tag:
    description: "Define the controller container image tag"
    type: string
    required: false
    default: ""
  controller-container-image-artifact:
    description: "Load the controller image used in the deployment from local artifact"
    type: string
    required: false
    default: ""
  policy-server-repository:
    description: "Define the policy server container image tag"
    type: string
    required: false
    default: "ghcr.io/kubewarden/policy-server"
  policy-server-tag:
    description: "Define the policy server container image tag"
    type: string
    required: true
  policy-server-container-image-artifact:
    description: "Load the policy server image used in the deployment from local artifact"
    required: false
    type: string
    default: ""
  cluster-name:
    description: "K3d cluster name"
    required: false
    type: string
    default: "kubewarden-test-cluster"
  cluster-args:
    description: "K3d cluster arguments"
    required: false
    type: string
    default: "--agents 1 --image rancher/k3s:v1.27.12-k3s1"

runs:
  using: "composite"
  steps:
    - name: "debug"
      run: |
        echo ${{ inputs.controller-image-repository }}
        echo ${{ inputs.controller-image-tag }}
        echo ${{ inputs.controller-container-image-artifact }}
      shell: bash

    - name: "Recreate Kubernetes cluster"
      run: |
        k3d cluster delete ${{ inputs.cluster-name }}
        k3d cluster create ${{ inputs.cluster-name }} ${{ inputs.cluster-args }}
        kubectl wait --for=condition=Ready nodes --all
      shell: bash

    - name: "Download Kubewarden controller container image artifact"
      if: ${{ inputs.controller-container-image-artifact != '' }}
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
      with:
        name: ${{inputs.controller-container-image-artifact}}
        path: /tmp
    - name: "Load Kubewarden controller container image into K3D cluster"
      if: ${{ inputs.controller-container-image-artifact != '' }}
      run: |
        k3d image import /tmp/${{inputs.controller-container-image-artifact}}.tar -c ${{ inputs.cluster-name }}
      shell: bash

    - name: "Download policy server container image artifact"
      if: ${{ inputs.policy-server-container-image-artifact != '' }}
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
      with:
        name: ${{inputs.policy-server-container-image-artifact}}
        path: /tmp
    - name: "Load Policy Server container image into K3D cluster"
      if: ${{ inputs.policy-server-container-image-artifact != '' }}
      run: |
        k3d image import /tmp/${{inputs.policy-server-container-image-artifact}}.tar -c ${{ inputs.cluster-name }}
      shell: bash

    - name: "Install Helm"
      uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4
      with:
        version: v3.14.4 # default is latest stable

    - name: "Install cert-manager and wait to be ready"
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.5/cert-manager.yaml
        kubectl wait --for=condition=Available deployment --timeout=3m -n cert-manager --all
      shell: bash
    - name: "Install Kubewarden Helm repository"
      run: helm repo add --force-update kubewarden https://charts.kubewarden.io
      shell: bash

    - name: "Install Kubewarden CRDs"
      run: helm upgrade --install --devel --wait --timeout 10m --namespace kubewarden --create-namespace kubewarden-crds kubewarden/kubewarden-crds
      shell: bash
    - name: "Install Kubewarden controller"
      run: |
        helm upgrade --install --devel --wait --timeout 10m \
          --set image.repository=${{ inputs.controller-image-repository }} \
          --set image.tag=${{ inputs.controller-image-tag }} \
          --set policyServer.image.repository=${{ inputs.policy-server-repository }} \
          --set policyServer.image.tag=${{ inputs.policy-server-tag }} \
          --namespace kubewarden \
          kubewarden-controller kubewarden/kubewarden-controller
      shell: bash
    - name: "Install Kubewarden defaults"
      run: |
        helm upgrade --install --devel --wait --timeout 10m \
          --namespace kubewarden \
          kubewarden-defaults kubewarden/kubewarden-defaults
      shell: bash
